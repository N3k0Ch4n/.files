(defpoll user :interval "60s"
  `echo $USER`)

(defwidget profile [] 
    (box :orientation "v" 
		 :space-evenly "false"
		 :class "_profile"
         :vexpand "false"
         :hexpand "false"
      (box :class "_pfp" :halign "center")
      (box :class "name" :halign "center" "${user}")))

(defpoll volint :interval "5s" "bash $HOME/.config/tint2/scripts/vol.sh cur")
(defpoll micint :interval "5s" "bash $HOME/.config/eww/scripts/vol.sh")

(defwidget volume []
  (box :orientation "v"
       :space-evenly "false"
       :class "volume"
    (box :orientation "h"
      (scale :class "volslide"
             :value "${volint}"
             :min 0
             :max 101
             :orientation "v"
             :flipped "true"
             :onchange "amixer -D pulse sset Master {}%")
      (scale :class "micslide"
             :value "${micint}"
             :min 0
             :max 30
             :flipped "true"
             :orientation "v"
             :onchange "amixer -D pulse sset Capture {}%"))
    (box :orientation "h"
      (label :class "volicon"
             :text "")
      (label :class "micicon"
             :text "")
      )))

(defpoll toggle :interval "0s" "bash $HOME/.config/eww/scripts/music toggle")
(defpoll curtime :interval "5s" "bash $HOME/.config/eww/scripts/music cur")
(defpoll curmusic :interval "2s" "bash $HOME/.config/eww/scripts/music curm")

(defwidget mpd []
  (box :class "mpd"
       :orientation "v"
       :space-evenly "false"
    (box :orientation "h"
      (label :class "mpdtitle" 
             :text curmusic 
             :limit-width 10))
    (box :orientation "h" 
         :space-evenly "false" 
         :halign "center"
      (scale :class "cur_slide"
             :value "${curtime}"
             :orientation "h"
             :min 0
             :max 100 
             :active "false"))
    (box :orientation "h" 
         :space-evenly "false" 
         :class "controlmusic" 
         :hexpand "false" 
         :vexpand "false" 
         :halign "center"
      (button :class "previcon" :onclick "mpc prev" "")
      (button :class "toggleicon" :onclick "mpc toggle" "${toggle}")
      (button :class "nexticon" :onclick "mpc next" ""))))


(defwidget power []
  (box :orientation "v" 
       :class "power" 
       :space-evenly "true"
    (box :orientation "h"
      (button :class "powericon" :onclick "poweroff" ""))
    (box :orientation "h"
      (button :class "restarticon" :onclick "reboot" ""))
    (box :orientation "h"
      (button :class "lockicon" :onclick "notify-send 'lock'" ""))))


(defpoll ramvar :interval "60s" "bash $HOME/.config/eww/scripts/system --mem")
(defpoll cpuvar :interval "60s" "bash $HOME/.config/eww/scripts/system --cpu")

(defwidget system []
  (box :orientation "v"
       :class "system"
       :space-evenly "true"
    (box :class "systemcir" 
         :space-evenly "false" 
         :orientation "h"
         :halign "center"
         :spacing 20
    (circular-progress :class "diskcir" 
                       :value cpuvar
                       :start-angle 0
                       :thickness 11 
                       :clockwise true 
                       :tooltip "CPU"
      (label :class "diskicon" :text ""))
    (circular-progress :class "ramcir"
                       :value ramvar
                       :thickness 11
                       :start-angle 0
                       :clockwise true
                       :tooltip "Ram"
      (label :class "ramicon" :text "")))))


(defwidget fav []
  (box :class "fav" 
       :orientation "v" 
       :space-evenly "true"
    (button :class "app1" 
            :halign "center" 
            :onclick "kitty &"
      "")
    (button :class "app2" 
            :halign "center" 
            :onclick "firefox &"
      "")
    (button :class "app3" 
            :halign "center" 
            :onclick "discord &"
      "")
    (button :class "app4" 
            :halign "center" 
            :onclick "kitty ncmpcpp &"
      "")))


(defpoll timevar :interval "6s" "date +%k:%M")
(defpoll datevar :interval "60s" "date +%A,' '%d' '%b")

(defwidget time []
  (box :class "timebox"
       :orientation "v"
       :space-evenly "false"
    (box :class "timetext"
         :orientation "h" :halign "center"
      "${timevar}")
    (box :class "datetext"
         :orientation "h" :halign "center"
      "${datevar}")))

(defwidget bg []
  (box :class "bg"
    :orientation "v"
    :space-evenly "false"
    (box :orientation "h"
      (time))))

(defwindow pfp
  :geometry (geometry 
             :width "200px"
             :height "240px"
             :x "20px"
             :y "364px")
  :anchor "top left"
  :stacking "bg"
  (profile))

(defwindow volume
  :geometry (geometry
              :width "120px"
              :height "400px"
              :x "240px"
              :y "354px")
  :anchor "top left"
  :stacking "bg"
  (volume))

(defwindow mpd
  :geometry (geometry
              :width "200px"
              :height "120px"
              :x "20px"
              :y "634px")
  :anchor "top left"
  :stacking "bg"
  (mpd))

(defwindow power
  :geometry (geometry
              :width "100px"
              :height "180px"
              :x "260px"
              :y "774px")
  :anchor "top left"
  :stacking "bg"
  (power))

(defwindow system
  :geometry (geometry
              :width "250px"
              :height "164px"
              :x "110px"
              :y "884px")
  :anchor "top left"
  :stacking "bg"
  (system))

(defwindow app
  :geometry (geometry
              :width "70px"
              :height "274px"
              :x "20px"
              :y "774px")
  :anchor "top left"
  :stacking "bg"
  (fav))

(defwindow sidebar
  :geometry (geometry
              :width "380px"
              :height "804px"
              :x "0px"
              :y "264px")
  :anchor "top left"
  :stacking "fg"
  (bg))
